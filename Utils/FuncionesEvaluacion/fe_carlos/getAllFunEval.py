# -*- coding: utf-8 -*-
"""mipartedelajedrez.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Lfsja2ibe5INDZBRPcYpGhnPIl5_AwO
"""

import chess

#25
def Rookopenfile(board):  
  posiciones_de_torres = list(board.pieces(chess.ROOK, not board.turn))
  torres_libres = 0
  for torre in posiciones_de_torres:
    obstaculo = False
    columna_torre = torre%8
    for i in range(8): 
      posicion_tablero = columna_torre + (i * 8)
      if board.piece_at(posicion_tablero) is not None and posicion_tablero != torre:
        if board.piece_at(posicion_tablero).symbol() == 'p' or board.piece_at(posicion_tablero).symbol() == 'P':
          obstaculo = True
    if obstaculo == False:
      torres_libres+=1  
  return torres_libres

#26
def Rooksemiopenfile(board):
  posiciones_de_torres = list(board.pieces(chess.ROOK, not board.turn))
  torres_libres = 0
  for torre in posiciones_de_torres:
    obstaculo = False
    columna_torre = torre%8
    for i in range(8): 
      posicion_tablero = columna_torre + (i * 8)
      if board.piece_at(posicion_tablero) is not None and posicion_tablero != torre:
        if not board.turn: #si es turno de blancas
          if board.piece_at(posicion_tablero).symbol() == 'P':
            obstaculo = True
        else: #si es turno de negras
          if board.piece_at(posicion_tablero).symbol() == 'p':
            obstaculo = True
    if obstaculo == False:
      torres_libres+=1  
  return torres_libres

#27
def Rookclosedfile(board):
  posiciones_de_torres = list(board.pieces(chess.ROOK, not board.turn))
  torres_bloqueadas = 0
  for torre in posiciones_de_torres:
    obstaculo = 0
    columna_torre = torre%8
    for i in range(8): 
      posicion_tablero = columna_torre + (i * 8)
      if board.piece_at(posicion_tablero) is not None and posicion_tablero != torre:
        if board.piece_at(posicion_tablero).symbol() == 'P':
          obstaculo +=1  
        if board.piece_at(posicion_tablero).symbol() == 'p':
          obstaculo +=1             
    if obstaculo == 2:
      torres_bloqueadas+=1  
  return torres_bloqueadas

#28
def Rookonseventh(board):
  posiciones_de_torres = list(board.pieces(chess.ROOK, not board.turn))
  for torre in posiciones_de_torres:
    if not board.turn:
      if 47 < torre < 56:
        return 1
    else: 
      if 7 < torre < 16:
        return 1  
  return 0

#29
def Rookmob(board):
  posiciones_de_torres = list(board.pieces(chess.ROOK, not board.turn))
  movimientos = 0
  for torre in posiciones_de_torres:
    #print("torre posicion: "+ str(torre))
    obstaculo = False
    columna_torre = torre % 8
    fila_torre = torre // 8
    filas_por_arriba = 7 - fila_torre
    filas_por_debajo = fila_torre
    columnas_izquieda = columna_torre
    columnas_derecha = 7 - columna_torre
    for i in range(filas_por_arriba):       
      posicion_tablero = torre + ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(filas_por_debajo): 
      posicion_tablero = torre - ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(columnas_izquieda): 
      posicion_tablero = torre - (i+1)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(columnas_derecha): 
      posicion_tablero = torre + (i+1)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
  return movimientos

#30
def Rookcon(board):
  posiciones_de_torres = list(board.pieces(chess.ROOK, not board.turn))
  if len(posiciones_de_torres) == 2:
    if posiciones_de_torres[0]%8 == posiciones_de_torres[1]%8: #columna igual
      diferencia_de_filas = abs(posiciones_de_torres[0]//8 - posiciones_de_torres[1]//8)-1
      for i in range(diferencia_de_filas):
        posicion_tablero = posiciones_de_torres[0] + ((i+1) * 8)
        if board.piece_at(posicion_tablero) is not None:
          return 0
    if posiciones_de_torres[0]//8 == posiciones_de_torres[1]//8: #fila igual
      diferencia_de_columnas = abs(posiciones_de_torres[0]%8 - posiciones_de_torres[1]%8)-1
      for i in range(diferencia_de_columnas):
        posicion_tablero = posiciones_de_torres[0] + (i+1)
        if board.piece_at(posicion_tablero) is not None:
          return 0
    return 1
  else: 
    return 0

#31
def Queenmob(board):
  posiciones_de_torres = list(board.pieces(chess.QUEEN, not board.turn))
  movimientos = 0
  for torre in posiciones_de_torres:
    #print("reina posicion: "+ str(torre))
    obstaculo = False
    columna_torre = torre % 8
    fila_torre = torre // 8
    filas_por_arriba = 7 - fila_torre
    filas_por_debajo = fila_torre
    columnas_izquierda = columna_torre
    columnas_derecha = 7 - columna_torre
    for i in range(filas_por_arriba):       
      posicion_tablero = torre + ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(filas_por_debajo): 
      posicion_tablero = torre - ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(columnas_izquierda): 
      posicion_tablero = torre - (i+1)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(columnas_derecha): 
      posicion_tablero = torre + (i+1)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(min(filas_por_arriba,columnas_izquierda)):#diagonal arriba izquierda
      posicion_tablero = torre - (i+1) + ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(min(filas_por_debajo,columnas_derecha)):#diagonal abajo derecha
      posicion_tablero = torre + (i+1) - ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(min(filas_por_debajo,columnas_izquierda)):#diagonal abajo izquierda
      posicion_tablero = torre - (i+1) - ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
    for i in range(min(filas_por_arriba,columnas_derecha)):#diagonal arriba derecha
      posicion_tablero = torre + (i+1) + ((i+1) * 8)
      if board.piece_at(posicion_tablero) is not None:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: break")
        break
      else:
        #print("columna: "+str(posicion_tablero%8)+" fila: "+str(posicion_tablero//8)+" pieza: "+str(board.piece_at(posicion_tablero))+" resultado: +1")
        movimientos+=1
  return movimientos

#32
def Pawn_value(board):
  return len(list(board.pieces(chess.PAWN, not board.turn)))

#33
def Knight_value(board):
  return len(list(board.pieces(chess.KNIGHT, not board.turn)))

#34
def Bishop_value(board):
  return len(list(board.pieces(chess.BISHOP, not board.turn)))

#35
def Queen_value(board):
  return len(list(board.pieces(chess.QUEEN, not board.turn)))

#36
def Rook_value(board):
  return len(list(board.pieces(chess.ROOK, not board.turn)))

def get_all_fun_eval_c(board):
  lista_de_parametros = []
  #25
  lista_de_parametros.append(Rookopenfile(board))
  #26
  lista_de_parametros.append(Rooksemiopenfile(board))
  #27
  lista_de_parametros.append(Rookclosedfile(board))
  #28
  lista_de_parametros.append(Rookonseventh(board))
  #29
  lista_de_parametros.append(Rookmob(board))
  #30
  lista_de_parametros.append(Rookcon(board))
  #31
  lista_de_parametros.append(Queenmob(board))
  #32
  lista_de_parametros.append(Pawn_value(board))
  #33
  lista_de_parametros.append(Knight_value(board))
  #34
  lista_de_parametros.append(Bishop_value(board))
  #35
  lista_de_parametros.append(Queen_value(board))
  #36
  lista_de_parametros.append(Rook_value(board))

  return lista_de_parametros
